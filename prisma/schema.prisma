generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Breed {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  images    FileStoraged[]
  petAds    PetAd[]        @relation(fields: [petAdsId], references: [id])
  petAdsId  String[]       @db.ObjectId
  petType   PetType
}

model PetAd {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  address   Address
  breeds    Breed[]        @relation(fields: [breedIds], references: [id])
  breedIds  String[]       @db.ObjectId
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  dateBirth DateTime
  images    FileStoraged[]
  name      String
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @db.ObjectId
  requests  PetAdRequest[]
}

model PetAdRequest {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.ObjectId
  petAd     PetAd         @relation(fields: [petAdId], references: [id])
  petAdId   String        @db.ObjectId
  status    RequestStatus @default(PENDING)
  visits    Visit[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String         @unique
  petAds        PetAd[]
  addresses     Address[]
  preadoption   Preadoption?
  visits        Visit[]
  petAdRequest  PetAdRequest[]
  role          Role           @default(USER)
  sessions      Session[]
  accounts      Account[]
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Visit {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id])
  address         Address
  userId          String       @db.ObjectId
  status          VisitStatus  @default(PENDING)
  date            DateTime
  userIdToConfirm String       @db.ObjectId
  petAdRequest    PetAdRequest @relation(fields: [petAdRequestId], references: [id])
  petAdRequestId  String       @db.ObjectId
  type            VisitType
}

type Address {
  city         String
  country      CountryIso
  placeId      String
  displayName  String
  postalCode   Int
  streetNumber String?
}

type FileStoraged {
  publicId String
  url      String
}

type Preadoption {
  formId     String
  responseId String
}

type ProviderAccount {
  providerAccountId String
  provider          String
}

enum CountryIso {
  ES
}

enum PetType {
  CAT
  DOG
}

enum RequestStatus {
  ACCEPTED
  PENDING
  REJECTED
}

enum Role {
  ADMIN
  USER
}

enum VisitStatus {
  PENDING
  CONFIRMED
}

enum VisitType {
  VISIT_NEXT_HOME
  VISIT_PET
}
