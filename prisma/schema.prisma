generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Breed {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  images    FileStoraged[]
  petAds    PetAd[]        @relation(fields: [petAdsId], references: [id])
  petAdsId  String[]       @db.ObjectId
  petType   PetType
}

model PetAd {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  address        Address
  breeds         Breed[]           @relation(fields: [breedIds], references: [id])
  breedIds       String[]          @db.ObjectId
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  dateBirth      DateTime
  images         FileStoraged[]
  adoptionStatus AdoptionStatus    @default(IN_SEARCH)
  name           String
  gender         Gender
  petType        PetType
  user           User              @relation(fields: [userId], references: [id])
  userId         String            @db.ObjectId
  requests       AdoptionRequest[]
}

model AdoptionRequest {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @db.ObjectId
  petAd     PetAd          @relation(fields: [petAdId], references: [id])
  petAdId   String         @db.ObjectId
  status    RequestStatus  @default(PENDING)
  steps     AdoptionStep[]

  @@map("PetAdRequest")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  email           String            @unique
  petAds          PetAd[]
  addresses       Address[]
  petAdRequests   AdoptionRequest[]
  role            Role              @default(USER)
  sessions        Session[]
  accounts        Account[]
  emailVerified   DateTime?
  name            String?
  image           String?
  password        String?
  preadoptionForm PreadoptionForm?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

type Address {
  city         String
  coordinates  Coordinates
  country      CountryIso
  placeId      String
  displayName  String
  postalCode   String
  streetName   String
  streetNumber String?
}

type AdoptionStep {
  step      AdoptionStepType
  status    RequestStatus    @default(PENDING)
  updatedAt DateTime
}

type Coordinates {
  lat Float
  lng Float
}

type FileStoraged {
  publicId String
  url      String
}

type PreadoptionForm {
  formId     String
  responseId String
}

type ProviderAccount {
  providerAccountId String
  provider          String
}

enum AdoptionStatus {
  IN_SEARCH
  ADOPTED
}

enum AdoptionStepType {
  PREADOPTION_FORM
}

enum CountryIso {
  ES
}

enum Gender {
  FEMALE
  MALE
}

enum PetType {
  CAT
  DOG
}

enum RequestStatus {
  ACCEPTED
  PENDING
  REJECTED
}

enum Role {
  ADMIN
  USER
}
