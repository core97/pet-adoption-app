generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AdoptionRequest {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @db.ObjectId
  petAd     PetAd          @relation(fields: [petAdId], references: [id])
  petAdId   String         @db.ObjectId
  status    RequestStatus  @default(PENDING)
  steps     AdoptionStep[]
}

model Breed {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  images    FileStoraged[]
  petAds    PetAd[]        @relation(fields: [petAdsId], references: [id])
  petAdsId  String[]       @db.ObjectId
  petType   PetType
}

model Country {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  isoCode             String      @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  name                CountryName
  isAvailableToSearch Boolean
}

model Notification {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime         @default(now())
  type           NotificationType
  description    String
  hasBeenSeen    Boolean          @default(false)
  userToNotify   User             @relation(fields: [userIdToNotify], references: [id])
  userIdToNotify String           @db.ObjectId
  url            String?
}

model PetAd {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  address           Address
  breeds            Breed[]           @relation(fields: [breedIds], references: [id])
  breedIds          String[]          @db.ObjectId
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  dateBirth         DateTime
  images            FileStoraged[]
  adoptionStatus    AdoptionStatus    @default(IN_SEARCH)
  name              String
  gender            Gender
  petType           PetType
  user              User              @relation(fields: [userId], references: [id])
  userId            String            @db.ObjectId
  requests          AdoptionRequest[]
  favouritesUsers   User[]            @relation(name: "favouritesPetAds", fields: [favouritesUsersId], references: [id])
  favouritesUsersId String[]          @db.ObjectId
  views             PetAdViews[]
}

model PetAdViews {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  petAd        PetAd    @relation(fields: [petAdId], references: [id])
  petAdId      String   @db.ObjectId
  viewsCounter Int      @default(0)

  @@unique([userId, petAdId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  email               String            @unique
  petAds              PetAd[]
  petAdViews          PetAdViews[]
  addresses           Address[]
  petAdRequests       AdoptionRequest[]
  role                Role              @default(USER)
  sessions            Session[]
  accounts            Account[]
  emailVerified       DateTime?
  name                String?
  image               String?
  password            String?
  preadoptionForm     PreadoptionForm?
  favouritesPetAds    PetAd[]           @relation(name: "favouritesPetAds", fields: [favouritesPetAdsIds], references: [id])
  favouritesPetAdsIds String[]          @db.ObjectId
  notifications       Notification[]
  preferences         UserPreferences?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

type Address {
  city         String
  coordinates  Coordinates
  country      String
  placeId      String
  displayName  String
  postalCode   String
  streetName   String
  streetNumber String?
}

type AdoptionStep {
  step      AdoptionStepType
  status    RequestStatus    @default(PENDING)
  updatedAt DateTime
}

type Coordinates {
  lat Float
  lng Float
}

// Translation
type CountryName {
  de String
  en String
  es String
  fr String
  it String
  pt String
}

type FileStoraged {
  publicId String
  url      String
}

type PreadoptionForm {
  formId     String
  responseId String
}

type ProviderAccount {
  providerAccountId String
  provider          String
}

type UserPreferences {
  searchCountry String
}

enum AdoptionStatus {
  IN_SEARCH
  ADOPTED
}

enum AdoptionStepType {
  PREADOPTION_FORM
}

enum Gender {
  FEMALE
  MALE
}

enum NotificationType {
  // Cuando crean una solicitud de anuncio hacia uno de sus anuncios
  ADOPTION_REQUEST_CREATED
  // Cuando acepta / rechaza el formulario de preadopción.
  ACCEPTED_PREADOPTION_FORM
  DECLINED_PREADOPTION_FORM
  // Cuando es aceptado como dueño
  ACCEPTED_AS_OWNER
  // Cuando un anuncio lo tienes marcado como favorito y ya ha sido adoptado
  YOUR_FAVOURITE_HAS_ALREADY_BEEN_ADOPTED
}

enum PetType {
  CAT
  DOG
}

enum RequestStatus {
  ACCEPTED
  PENDING
  REJECTED
}

enum Role {
  ADMIN
  USER
}
